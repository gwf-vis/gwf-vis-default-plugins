/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { GloablInfoDict, ObtainDataDelegateDict } from "./utils/gwf-vis-plugin";
export namespace Components {
    interface GwfVisGeojsonLayer {
        "active": boolean;
        "addToMapDelegate": (layer: L.Layer, name: string, type: 'base-layer' | 'overlay', active?: boolean) => void;
        "datasetName": string;
        "globalInfoDict": GloablInfoDict;
        "leaflet": typeof globalThis.L;
        "name": string;
        "obtainDataDelegateDict": ObtainDataDelegateDict;
        "options"?: L.GeoJSONOptions;
        "type": 'base-layer' | 'overlay';
        "updateGlobalInfoDelegate": (gloablInfoDict: GloablInfoDict) => void;
        "variableName": string;
    }
    interface GwfVisMetadata {
        "datasetName": string;
        "globalInfoDict": GloablInfoDict;
        "leaflet": typeof globalThis.L;
        "obtainDataDelegateDict": ObtainDataDelegateDict;
        "updateGlobalInfoDelegate": (gloablInfoDict: GloablInfoDict) => void;
    }
    interface GwfVisTileLayer {
        "active": boolean;
        "addToMapDelegate": (layer: L.Layer, name: string, type: 'base-layer' | 'overlay', active?: boolean) => void;
        "globalInfoDict": GloablInfoDict;
        "leaflet": typeof globalThis.L;
        "name": string;
        "obtainDataDelegateDict": ObtainDataDelegateDict;
        "options"?: L.TileLayerOptions;
        "type": 'base-layer' | 'overlay';
        "updateGlobalInfoDelegate": (gloablInfoDict: GloablInfoDict) => void;
        "urlTemplate": string;
    }
}
declare global {
    interface HTMLGwfVisGeojsonLayerElement extends Components.GwfVisGeojsonLayer, HTMLStencilElement {
    }
    var HTMLGwfVisGeojsonLayerElement: {
        prototype: HTMLGwfVisGeojsonLayerElement;
        new (): HTMLGwfVisGeojsonLayerElement;
    };
    interface HTMLGwfVisMetadataElement extends Components.GwfVisMetadata, HTMLStencilElement {
    }
    var HTMLGwfVisMetadataElement: {
        prototype: HTMLGwfVisMetadataElement;
        new (): HTMLGwfVisMetadataElement;
    };
    interface HTMLGwfVisTileLayerElement extends Components.GwfVisTileLayer, HTMLStencilElement {
    }
    var HTMLGwfVisTileLayerElement: {
        prototype: HTMLGwfVisTileLayerElement;
        new (): HTMLGwfVisTileLayerElement;
    };
    interface HTMLElementTagNameMap {
        "gwf-vis-geojson-layer": HTMLGwfVisGeojsonLayerElement;
        "gwf-vis-metadata": HTMLGwfVisMetadataElement;
        "gwf-vis-tile-layer": HTMLGwfVisTileLayerElement;
    }
}
declare namespace LocalJSX {
    interface GwfVisGeojsonLayer {
        "active"?: boolean;
        "addToMapDelegate"?: (layer: L.Layer, name: string, type: 'base-layer' | 'overlay', active?: boolean) => void;
        "datasetName"?: string;
        "globalInfoDict"?: GloablInfoDict;
        "leaflet"?: typeof globalThis.L;
        "name"?: string;
        "obtainDataDelegateDict"?: ObtainDataDelegateDict;
        "options"?: L.GeoJSONOptions;
        "type"?: 'base-layer' | 'overlay';
        "updateGlobalInfoDelegate"?: (gloablInfoDict: GloablInfoDict) => void;
        "variableName"?: string;
    }
    interface GwfVisMetadata {
        "datasetName"?: string;
        "globalInfoDict"?: GloablInfoDict;
        "leaflet"?: typeof globalThis.L;
        "obtainDataDelegateDict"?: ObtainDataDelegateDict;
        "updateGlobalInfoDelegate"?: (gloablInfoDict: GloablInfoDict) => void;
    }
    interface GwfVisTileLayer {
        "active"?: boolean;
        "addToMapDelegate"?: (layer: L.Layer, name: string, type: 'base-layer' | 'overlay', active?: boolean) => void;
        "globalInfoDict"?: GloablInfoDict;
        "leaflet"?: typeof globalThis.L;
        "name"?: string;
        "obtainDataDelegateDict"?: ObtainDataDelegateDict;
        "options"?: L.TileLayerOptions;
        "type"?: 'base-layer' | 'overlay';
        "updateGlobalInfoDelegate"?: (gloablInfoDict: GloablInfoDict) => void;
        "urlTemplate"?: string;
    }
    interface IntrinsicElements {
        "gwf-vis-geojson-layer": GwfVisGeojsonLayer;
        "gwf-vis-metadata": GwfVisMetadata;
        "gwf-vis-tile-layer": GwfVisTileLayer;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gwf-vis-geojson-layer": LocalJSX.GwfVisGeojsonLayer & JSXBase.HTMLAttributes<HTMLGwfVisGeojsonLayerElement>;
            "gwf-vis-metadata": LocalJSX.GwfVisMetadata & JSXBase.HTMLAttributes<HTMLGwfVisMetadataElement>;
            "gwf-vis-tile-layer": LocalJSX.GwfVisTileLayer & JSXBase.HTMLAttributes<HTMLGwfVisTileLayerElement>;
        }
    }
}
